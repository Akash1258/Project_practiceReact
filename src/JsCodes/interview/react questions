 Q What is React?
 
 ans:  React(aka React.js or ReactJS) is an open-source front-end JavaScript library that is used for building composable user interfaces, especially for single-page applications. It is used for handling view layer for web and mobile apps based on components in a declarative approach.
 
 Q.What are the major features of React?
 
 ans: The major features of React are:

  1. Uses JSX syntax, a syntax extension of JS that allows developers to write HTML in their JS code.
  2. It uses VirtualDOM instead of RealDOM considering that RealDOM manipulations are expensive.
  3. Supports server-side rendering.
  4. Follows Unidirectional data flow or data binding.
  5. Uses reusable/composable UI components to develop the view.
 
 
 Q. What are Pure Components?

 ans:  React.PureComponent is exactly the same as React.Component except that it handles the shouldComponentUpdate() method for you. When props or state changes, PureComponent will do a shallow comparison on both props and state. Component on the other hand won't compare current props and state to next out of the box. Thus, the component will re-render by default whenever shouldComponentUpdate is called. In functional components we use React.memo() API. React.memo() is a higher-order component. It takes a React component as its first argument and returns a special type of React component that allows the renderer to render the component while memoizing the output. Therefore, if the componentâ€™s props are shallowly equal, the React.memo() component will bail out the updates.
 
 Q. What is the difference between state and props?
 
 ans: In React, both state and props are are plain JavaScript objects and used to manage the data of a component, but they are used in different ways and have different characteristics. state is managed by the component itself and can be updated using the setState() function. Unlike props, state can be modified by the component and is used to manage the internal state of the component. Changes in the state trigger a re-render of the component and its children. props (short for "properties") are passed to a component by its parent component and are read-only, meaning that they cannot be modified by the component itself. props can be used to configure the behavior of a component and to pass data between components.
 
 Q. Why should we not update the state directly?
 
 ans: If you try to update the state directly then it won't re-render the component.
 
 Instead use setState() method. It schedules an update to a component's state object. When state changes, the component responds by re-rendering.
 
 
 Q. What are the lifecycle methods of React?
 
 
 
 api : https://jsonplaceholder.typicode.com/users   
 api : https://jsonplaceholder.typicode.com/todos   (recomended)
 

 ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


import { useEffect, useState } from "react";
export default function ReusableTable() {
  const [state, setState] = useState([]);

  useEffect(() => {
    fetch("https://jsonplaceholder.typicode.com/todos") //api for the get request
      .then((response) => response.json())
      .then((data) => setState(data));
  }, []);

  const tableHeader = state.length && Object.keys(state[0]);

  return (
    <div style={{textAlign: 'center'}}>
      Reusable table
      <table>
        <thead>
          <tr style={{ color: "red" }}>
            {tableHeader.length &&
              tableHeader.map((item) => (
                <th style={{ border: "1px solid black" }} key={item}>
                  {item}
                </th>
              ))}
          </tr>
        </thead>
        <tbody>
          {state.length &&
            state.map((item) => (
              <tr key={item}>
                {tableHeader.map((tableItem) => (
                  <td key={tableItem} style={{ border: "1px solid black" }}>
                    {item && item[tableItem]}
                  </td>
                ))}
              </tr>
            ))}
        </tbody>
      </table>
    </div>
  );
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

